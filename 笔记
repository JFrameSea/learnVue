笔记
function Vue(options) {
  this._init(options)
}
new Vue({
    el: '#app',
    data: {
        message: 'Hello Vue!'
    }
})


initMixin(Vue)
做了一件事情，在Vue的原型属性上添加了_init方法

_init方法中干了以下这些事情
/*初始化生命周期*/
initLifecycle(vm)
/*初始化事件*/
initEvents(vm)
/*初始化render*/
initRender(vm)
/*调用beforeCreate钩子函数并且触发beforeCreate钩子事件*/
callHook(vm, 'beforeCreate')
initInjections(vm) // resolve injections before data/props
/*初始化props、methods、data、computed与watch*/
initState(vm)
##############
observe(data) {
  return new Observer(data)
}
Observer(data) {
  1. 将Observer实例绑定到data的__ob__属性上面去，干什么用？？？
  数组：observeArray(data)
  对象：walk(data)
}
walk(data) {
  const keys = Object.keys(data)
  for (let i = 0; i < keys; i++) {
    defineReactive(data, keys[i], data[keys[i]])
  }
}
defineReactive(data, key, value) {
  const dep = new Dep()
  Object.defineProperty(obj, key, {
    get: () => {
      dep.depend();
      // Dep有个subs数组，专门用来存放watcher,观察者
      // Dep.target.addDep(this), target是什么时候赋值的？？？，在模板编译的时候new Watcher
      // Dep.target是一个Dep的静态属性，是一个watcher
      // 也就是watcher.addDep(dep)，watcher的addDep
      addDep(dep) {
        dep.addSubs(this)
      }
      // 实际上watcher被添加到了dep里面的subs里面
    },
    set: () => {
      dep.notify()
      // 通知所有的观察者
    }
  })
}



##############
initProvide(vm) // resolve provide after data/props
/*调用created钩子函数并且触发created钩子事件*/
callHook(vm, 'created')

















===========================================================================================================================

stateMixin(Vue)
eventsMixin(Vue)
lifecycleMixin(Vue)
renderMixin(Vue)